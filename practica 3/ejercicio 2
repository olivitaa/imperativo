{2. Escribir un programa que:
a. Implemente un módulo que genere aleatoriamente información de ventas de un comercio.
Para cada venta generar código de producto, fecha y cantidad de unidades vendidas. Finalizar
con el código de producto 0. Un producto puede estar en más de una venta. Se pide:}

program ej2p3;
type
  unafecha = record
    dia: integer;
    mes:integer;
    anio:integer;
  end;
  venta = record
    cod:integer;
    fecha:unafecha;
    cant:integer;
  end;
  
  producto = record
    cod:integer;
    cant:integer;
  end; 
  
  arbol2 = ^nodo2;
  
  nodo2 = record
    dato:producto;
    hi:arbol2;
    hd:arbol2;
  end; 
  
  arbol =^nodo;
  nodo = record
    dato:venta;
    hi:arbol;
    hd:arbol;
  end;
//modulos

procedure leerventa (var v:venta);
begin
  writeln ('ingresar codigo de producto');
  readln (v.cod);
  if (v.cod <> 0) then begin
    v.fecha.dia:= Random (31)+1;
    v.fecha.mes:= Random (12)+1;
    v.fecha.anio:= Random (25)+1+2000;
    writeln ('ingrese cantidad');
    readln (v.cant);
  end;
end;

{
i. Generar y retornar un árbol binario de búsqueda de ventas ordenado por código de
producto. Los códigos repetidos van a la derecha.}

procedure agregarhoja (var a:arbol; v:venta);
begin
  if (a = nil) then begin
    new (a);
    a^.dato:=v;
    a^.hi:=nil;
    a^.hd:=nil;
  end
  else begin
    if (v.cod >= a^.dato.cod) then
      agregarhoja (a^.hd,v)
    else
      agregarhoja (a^.hi,v);
  end;
end;

procedure cargararbol (Var a:arbol);
var
  v:venta;
begin
  leerventa(v);
  while (v.cod <> 0) do begin
    agregarhoja(a,v);
    leerventa (v);
  end;
end;
 

{ii. Generar y retornar otro árbol binario de búsqueda de productos vendidos ordenado por
código de producto. Cada nodo del árbol debe contener el código de producto y la
cantidad total de unidades vendidas.}

procedure insertar (var a2:arbol; a:arbol);
begin
  if (a2 = nil) then begin
    new (a2);
    a2^.dato.cod:= a^.dato.cod;
    a2^.dato.cant:= a^.dato.cant;
  end
  else begin
    if (a^.dato.cod > a2^.dato.cod) then
      insertar(a2^.hi,a)
    else begin
      if (a^.dato.cod < a2^.dato.cod) then
        insertar(a2^.hd,a)
      else
        a2^.dato.cant:= a2^.dato.cant + a^.dato.cant;
    end;
  end;
end;

{function buscar (cod:integer; a2:arbol2):boolean;
begin
  if (a2 <> nil then)
    if (a2^.dato.cod = cod) then
      buscar:= true
      a2^.dato.cant:= a2^.dato.cant +1;
    else begin
      if (a2^.dato.cod < cod) then
        buscar (cod,a2^.hi)
      else
        buscar (cod,a2^.hd);
    end;
end;}

procedure arbol2 (var a2:arbol2; a:arbol);
var
  p:producto;
begin
  if (a <> nil) then
     insertar (a2,a);
end;

{iii. Generar y retornar otro árbol binario de búsqueda de productos vendidos ordenado
por código de producto. Cada nodo del árbol debe contener el código de producto y la
lista de las ventas realizadas del product o.
Nota: El módulo debe retornar TRES árboles.
b. Implemente un módulo que reciba el árbol generado en i. y una fecha y retorne la cantidad
total de productos vendidos en la fecha recibida.
c. Implemente un módulo que reciba el árbol generado en ii. y retorne el código de producto
con mayor cantidad total de unidades vendidas.
d.Implemente un módulo que reciba el árbol generado en iii. y retorne el código de producto
con mayor cantidad de ventas.}

//programa principal.
var
  a:arbol;
  a2:arbol2;
begin
  Randomize;
  a:=nil;
  a2:=nil;
end.
