{2. Una agencia dedicada a la venta de autos ha organizado su stock y, tiene la información
de los autos en venta. Implementar un programa que:}

program agencia;
const
	max = 2018;
	min = 2010;
type
	rangoanios = min..max;
	auto = record
		patente:string;
		anio: rangoanios;
		marca:string;
		modelo:string;
	end;
	
	arbol = ^nodo;
	nodo = record
		dato:auto;
		hi:arbol;
		hd:arbol;
	end;
	
	datoslista = record
		patente:string;
		anio: rangoanios;
		modelo:string;
	end;
	
	lista = ^nodolista;
	nodolista = record
		elem:datoslista;
		sig:lista;
	end;
	
	datosarbol2= record
		marca:string;
		list: lista;
	end;
	
	arbol2 =^nodo2;
	nodo2= record
		dato:datosarbol2;
		hi:arbol2;
		hd:arbol2;
	end;
	
	lista2 = ^nodolista2;
	nodolista2 = record
		elem:auto;
		sig:lista2;
	end;

{a) Genere la información de los autos (patente, año de fabricación (2010..2018), marca y
modelo, finalizando con marca ‘MMM’) y los almacene en dos estructuras de datos:
i. Una estructura eficiente para la búsqueda por patente.}

procedure leerauto (Var a:auto);
begin
    writeln ('ingrese patente, termina con MMM');
    read (a.patente);
    if (a.patente <> 'MMM') then begin
        a.anio:= min + Random (max - min) +1;
        writeln ('año generado: ', a.anio);
        readln (); //limpiar
        writeln ('ingrese marca');
        readln (a.marca);
        writeln ('ingrese modelo');
        readln (a.modelo);
    end;
end;

procedure arbol1 (Var a:arbol; au:auto);
var
	nue:arbol;
begin
	if(a=nil) then begin
		new (nue);
		nue^.dato:=au;
		nue^.hi:=nil;
		nue^.hd:=nil;
		a:=nue;
	end
	else begin
		if (au.patente <= a^.dato.patente) then
			arbol1 (a^.hi,au)
		else
			arbol1 (a^.hd,au);
	end;
end;

{
ii. Una estructura eficiente para la búsqueda por marca. Para cada marca se deben
almacenar todos juntos los autos pertenecientes a ella.}

procedure agregaradelante (Var l:lista; d:datoslista);
var
	nue:lista;
begin
	new (nue);
	nue^.elem:= d;
	nue^.sig:= l;
	l:=nue;
end;

procedure insertararbol2 (var a:arbol2; d:datoslista; unamarca:string);
var
	nue:arbol2;
begin
	if (a=nil) then begin
		new (nue);
		nue^.dato.list:=nil;
		agregaradelante (nue^.dato.list,d);
		nue^.dato.marca:= unamarca;
		nue^.hi:=nil;
		nue^.hd:=nil;
		a:= nue;
	end
	else begin
		if (unamarca < a^.dato.marca) then
			insertararbol2 (a^.hi,d,unamarca)
		else begin
			if (unamarca > a^.dato.marca) then
				insertararbol2 (a^.hd,d,unamarca)
			else
				agregaradelante (a^.dato.list, d);
		end;
	end;
end;

procedure asignar (au:auto; var d:datoslista);
begin
	d.anio:= au.anio;
	d.modelo:=au.modelo;
	d.patente:= au.patente;
end;

procedure cargararboles (var a:arbol; var a2:arbol2);
var
	au:auto;
	d:datoslista;
begin
	leerauto (au);
	while (au.patente <> 'MMM') do begin
		writeln ('cargando arbol 1');		
		arbol1 (a,au);
		asignar (au,d);
		writeln ('cargando arbol 2');
		insertararbol2 (a2,d,au.marca);
		leerauto (au);
	end;
end;                              

{b) Invoque a un módulo que reciba la estructura generado en a) i y una marca y retorne
la cantidad de autos de dicha marca que posee la agencia.}

function cantAutos(a: arbol; unaMarca: string): integer;
begin
  if a = nil then
    cantAutos := 0
  else
  begin
    if a^.dato.marca = unaMarca then
      cantAutos := 1 + cantAutos(a^.hi, unaMarca) + cantAutos(a^.hd, unaMarca)
    else
      cantAutos := cantAutos(a^.hi, unaMarca) + cantAutos(a^.hd, unaMarca);
  end;
end;


{c) Invoque a un módulo que reciba la estructura generado en a) ii y una marca y retorne
la cantidad de autos de dicha marca que posee la agencia.}

function contarnodos (l:lista):integer;
begin
	if (l = nil) then
		contarnodos:=0
	else
		contarnodos:= 1+ contarnodos(l^.sig);
end;

function cantautos2 (a:arbol2; unamarca:string):integer;
begin
	if (a=nil) then
		cantautos2:=0
	else begin
		if (unamarca < a^.dato.marca) then
			cantautos2:= cantautos2 (a^.hi,unamarca)
		else begin
			if (unamarca > a^.dato.marca) then
				cantautos2 := cantautos2 (a^.hd,unamarca)
			else
				cantautos2:= contarnodos (a^.dato.list);
		end;
	end;
end;

{d) Invoque a un módulo que reciba el árbol generado en a) i y retorne una estructura con
la información de los autos agrupados por año de fabricación.}

procedure insertar (var pri:lista2; a:auto);
var
	act,ant,nue:lista2;
begin
	writeln ('cargando auto', a.patente);
	new (nue);
	nue^.elem:=a;
	nue^.sig:=nil;
	act:=pri;
	ant:=nil;
	while (act <> nil) and (act^.elem.anio < a.anio) do begin
		ant:=act;
		act:=act^.sig;
	end;
	if (act = nil) then //al principio
		pri:=nue
	else //insertar medio o final
		ant^.sig:=nue;
	nue^.sig:=act;
end;

procedure listanueva (Var l:lista2; a:arbol);
begin
	if (a <> nil) then begin
		insertar (l,a^.dato);
		listanueva (l,a^.hi);
		listanueva (l,a^.hd);
	end;
end;

procedure imprimirLista(l: lista2);
begin
	while l <> nil do begin
		writeln('Patente: ', l^.elem.patente, ' - Año: ', l^.elem.anio, ' - Marca: ', l^.elem.marca, ' - Modelo: ', l^.elem.modelo);
		l := l^.sig;
	end;
end;

{e) Invoque a un módulo que reciba el árbol generado en a) i y una patente y devuelva el
modelo del auto con dicha patente.}

function modeloelegido (a:arbol; pat:string):string;
begin
	if (a=nil) then
		modeloelegido:= 'no existe'
	else begin
		if (pat < a^.dato.patente) then
			modeloelegido:= modeloelegido (a^.hi,pat)
		else begin
			if (pat > a^.dato.patente) then
				modeloelegido := modeloelegido (a^.hd,pat)
			else
				modeloelegido:= a^.dato.modelo
		end;
	end;
end;

procedure contarAutos(a: arbol; var total: integer);
begin
  if a <> nil then begin
    total := total + 1;
    contarAutos(a^.hi, total);
    contarAutos(a^.hd, total);
  end;
end;

{f) Invoque a un módulo que reciba el árbol generado en a) ii y una patente y devuelva el
modelo del auto con dicha patente.}



// ----------- Programa Principal -----------

var
  a: arbol;
  a2: arbol2;
  unaMarca: string;
  l:lista2;
  unapatente:string;
  total:integer;
begin
  Randomize;
  a := nil;
  a2 := nil;
  cargarArboles(a, a2);
  total := 0;
  contarAutos(a, total);
  writeln('Se cargaron ', total, ' autos.');

  writeln;
  writeln('----- CONSULTA DE AUTOS POR MARCA -----');
  writeln('Ingrese marca a buscar:');
  readln;
  readln(unaMarca);
  writeln('La cantidad de autos de la marca ', unaMarca, ' es: ', cantAutos(a, unaMarca));
  
  //inciso c
  
  writeln ('ingrese otra marca');
  readln (unaMarca);
  writeln('La cantidad de autos de la marca ', unaMarca, ' es: ', cantautos2 (a2, unaMarca));
  
  //inciso d
  writeln ('cargando lista');
  l:=nil;
  listanueva (l,a);
  writeln ('lista cargada');
  
  //inciso e
  writeln ('ingrese patente a buscar');
  readln (unapatente);
  writeln ('el modelo del auto de patente ', unapatente, ' es ' , modeloelegido (a,unapatente));
end.
